# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PMSFhV8KLY1BQV4kc1X-pGZ5WnUKVEWg
"""



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Load the dataset
data = pd.read_csv('Sales_Profit_Data_Electrical_Appliances.csv')

# Preprocess data: Handle missing values
data.fillna(0, inplace=True)

# Convert categorical variables to numerical using one-hot encoding
data = pd.get_dummies(data, drop_first=True)

# Split data into features (X) and target (y)
  # Replace 'Sales' with the target column name
  # Replace these column names with the actual names in your dataset
# Automatically determine feature columns
X = data.drop(columns=['Sales'])  # Replace 'Sales' with the actual target column name
y = data['Sales']  # Replace 'Sales' if needed


# Standardize features for better model performance
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

data

print(data.columns)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error

# Train the model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predict
rf_predictions = rf_model.predict(X_test)

# Evaluate
print("Random Forest R^2 Score:", r2_score(y_test, rf_predictions))
print("Random Forest RMSE:", mean_squared_error(y_test, rf_predictions, squared=False))

# To display the entire test data (3000 rows):
print(y_test)
import pandas as pd

# Example: Assuming 'sales_data' is your pandas Series or DataFrame
pd.set_option('display.max_rows', None)  # Remove the row limit for display
print(y_test)  # Replace 'sales_data' with your actual Series or DataFrame

rf_predictions

import pandas as pd

# Assuming `rf_predictions` is a numpy array or list with 3000 values
predictions_df = pd.DataFrame(rf_predictions, columns=['Predicted Sales'])

# Display the first few rows to confirm


# To display all 3000 rows (may not be ideal for large consoles, but works for notebooks)
print(predictions_df)

import pandas as pd
import matplotlib.pyplot as plt

# Example: Simulate X_test with regions and predicted sales
# Replace with your actual data
regions = ['North America', 'Europe', 'Asia', 'South America', 'Africa'] * 600  # Simulated regions
predicted_sales = [133.59, 4241.90, 752.40, 1815.50, 230.00] * 600  # Simulated predicted sales

# Create a DataFrame
data = pd.DataFrame({
    'Region': regions[:3000],
    'Predicted_Sales': predicted_sales[:3000]
})

# Group data by Region
sales_by_region = data.groupby('Region')['Predicted_Sales'].mean().reset_index()

# Plotting the bar chart
sales_by_region.plot(
    x='Region',
    y='Predicted_Sales',
    kind='bar',
    figsize=(10, 6),
    title='Predicted Sales by Region'
)

plt.xlabel('Region')
plt.ylabel('Average Predicted Sales')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Example: Simulate X_test with regions and predicted sales
# Replace with your actual data
regions = ['North America', 'Europe', 'Asia', 'South America', 'Africa'] * 600  # Simulated regions
predicted_sales = [133.59, 4241.90, 752.40, 1815.50, 230.00] * 600  # Simulated predicted sales

# Create a DataFrame
data = pd.DataFrame({
    'Region': regions[:3000],
    'Predicted_Sales': predicted_sales[:3000]
})

# Plotting histogram for Predicted Sales
plt.figure(figsize=(10, 6))

# Plot histogram for Predicted Sales only
plt.hist(data['Predicted_Sales'], bins=30, alpha=0.7, label='Predicted Sales', color='orange')

# Add labels and title
plt.xlabel('Sales Value')
plt.ylabel('Frequency')
plt.title('Histogram of Predicted Sales')

# Show legend
plt.legend(loc='upper right')

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Example: Simulate X_test with regions and predicted sales
# Replace with your actual data
regions = ['North America', 'Europe', 'Asia', 'South America', 'Africa'] * 600  # Simulated regions
predicted_sales = [133.59, 4241.90, 752.40, 1815.50, 230.00] * 600  # Simulated predicted sales

# Create a DataFrame
data = pd.DataFrame({
    'Region': regions[:3000],
    'Predicted_Sales': predicted_sales[:3000]
})

# Plotting the scatter plot for Region vs Predicted Sales
plt.figure(figsize=(10, 6))

# Scatter plot for Predicted Sales vs Region
for region in data['Region'].unique():
    region_data = data[data['Region'] == region]
    plt.scatter(
        region_data['Region'],  # x-axis as Region
        region_data['Predicted_Sales'],  # y-axis as Predicted Sales
        label=region,  # Label by Region
        alpha=0.6
    )

# Add labels and title
plt.xlabel('Region')
plt.ylabel('Predicted Sales')
plt.title('Scatter Plot of Predicted Sales by Region')

# Add legend
plt.legend(title='Region', loc='upper left')

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Example: Simulate X_test with regions and predicted sales
# Replace with your actual data
regions = ['North America', 'Europe', 'Asia', 'South America', 'Africa'] * 600  # Simulated regions
predicted_sales = [133.59, 4241.90, 752.40, 1815.50, 230.00] * 600  # Simulated predicted sales

# Create a DataFrame
data = pd.DataFrame({
    'Region': regions[:3000],
    'Predicted_Sales': predicted_sales[:3000]
})

# Group data by Region and calculate the average predicted sales
sales_by_region = data.groupby('Region')['Predicted_Sales'].mean().reset_index()

# Plotting the line graph for Predicted Sales only
plt.figure(figsize=(10, 6))

# Plot predicted sales
plt.plot(sales_by_region['Region'], sales_by_region['Predicted_Sales'], marker='o', label='Predicted Sales', color='orange')

# Add labels, title, and legend
plt.xlabel('Region')
plt.ylabel('Average Predicted Sales')
plt.title('Predicted Sales by Region')
plt.xticks(rotation=45)  # Rotate region labels for clarity
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

"""# New Section"""

